$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$ class-13:25Sep Schema Migration and Introduction to Unit Testing $$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Introduction to Unit Testing:

-> Unit testing is a software testing method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures, are tested to determine whether they are fit for use.
Importance of Unit Testing:
-> Unit testing is a software development process in which the smallest testable parts of an application, called units, are individually and independently scrutinized for proper operation. Unit testing can be done manually but is often automated.


***************** Test- Driven Development (TDD): ************************
-> Test- Driven Development (TDD) is a software development process that relies on the repetition of a very 	short development cycle:
-> First the developer writes an (initially failing) automated test case that defines a desired improvement or new function,
-> Then produces the minimum amount of code to pass that test, and
-> Finally refactors the new code to acceptable standards. Kent Beck, who is credited with having developed or 'rediscovered' the technique, stated in 2003 that TDD encourages simple designs and inspires confidence.

**** Flaky Tests **********************
-> A flaky test is a test that is not consistently passing or failing, but rather both, for the same code. This is usually due to the test depending on some kind of external state, which is hard to control and might change unexpectedly.
-> Flaky tests are a problem because they make it harder to trust the test suite. If a test fails, you want to be sure that it's because of a real problem in the code, not because of some flaky test. If a test is flaky, it's hard to know whether a failure is a real failure or not.
-> Flaky tests are also a problem because they make it harder to trust the code. If a test is flaky, it's hard to know whether a failure is a real failure or not. If a test is flaky, it's hard to know whether a failure is a real failure or not.
Flaky Tests happen because of the following reasons:
-> The test depends on some kind of external state, which is hard to control and might change unexpectedly.
1. Concurrency: If the test is not thread-safe, it might fail when run in parallel with other tests.
2. Time: If the test depends on the current time, it might fail if the test runs too close to a time boundary.
3. Randomness: If the test depends on a random number generator, it might fail if the generator produces an unexpected value.

*****************************************************************
Let's say if in future the getProductById implementation changes.
 For example, instead of returning null when the product is not found, it returns an empty generic product dto.
 This will break the code of all the clients that are using the getProductsById.
 To avoid this, we can write a test for the getProductsById method.
This test will ensure that the getProductsById method returns a product when the product is found and throws an exception when the product is not found.
***********************************************************************

Implementing Unit Tests to demonstrate Flaky tests:
---- We are writing the test under the src/test/java/dev/navneet/productservice/RandomTest.java file.

@SpringBootTest
public class RandomTest {
    @Test
    void testLessThan3() {
        Random random = new Random();
        int number = random.nextInt();
        System.out.println(number);
        assert(number < 10000000);
    }
}
As we can see, the test is using the Random class to generate a random number and then asserting that the number is less than 10000000.
If we run the test multiple times, we will see that the test is passing sometimes and failing sometimes.
This is because the Random class is generating a random number every time the test is run.
So, the test is not deterministic and is failing sometimes and passing sometimes.
This is an example of a flaky test.
**************************************************************
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$  class-14:27Sep Unit Testing-2 																							 $$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
-> In this class, we will learn about the different types of testing and how to write unit tests for them.
-> We will also learn about the different types of assertions that we can use in our unit tests.

1.	Integration Testing:
A typical S/w system has to work with db., 3rd party APIs, cache etc.
Integration tests how a system works wit a 3rd apart API as well

Assertion Frameworks:
-> An assertion is a statement that a condition is always true at that point in the program.
-> Assertions are used to test the correctness of the program.
-> In Java, we can use the assert keyword to write assertions.
-> The assert keyword is used to test the correctness of the program.

# common assert methods:
1.	assert(condition)
2.	assertTrue(condition, msg)
3.	assertEquals(expected, actual, msg)
4.	assertNull(condition)
5.	assertThrows(exception.class, object)
assertThrows is used to assert if the exception that we are throwing from our code is working as expected.

Detailed notes of teh class is made in the word doc.
*************************************************************************************************************
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$  class-15:4Oct Unit Testing-3 																							 $$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

We have seen the 3 types of testing:
1.	Unit Testing
		--> Unit tests are designed to test a single unit of code / a code in Isolation.
2.	Integration Testing
3.	End to End Testing / Functional Testing:

If we do not get the desired result by the findProductsByTitle method, it may also mean that the bug may be coming from the inner method productRepo function or any other 3rd party dependency.
In this case, the test for the 3rd party dependency and not the productService method is failing which is causing the testing of the product itself to fail which is not the actual case.
To solve this problem, we can use Mocking.
************************************************************************************
Mocking:
-> Mocking is a process used in unit testing when the unit being tested has external dependencies.
-> The purpose of mocking is to isolate and focus on the code being tested and not on the behavior or state of external dependencies.
-> Mocking is used when we want to test a class in isolation but it has dependencies on other classes.
-> Mocking is used to create a dummy object of the class that we want to test.
So, ideally we should mock the dependencies of the class that we want to test. In our case, we want to test the ProductService class. So, we should mock the ProductRepository class.
************************************************************************************
Mockito:
-> Mockito is a mocking framework that allows us to create dummy objects of the classes that we want to test.
############################################################################################################
public class ProductControllerTest {

    @Autowired
    private FakeStoreProductServiceClient fakeStoreProductServiceClient;
    @Autowired
    private ProductController productController;
    @MockBean
    private ProductService productService;
    @Test
    public void returnsNullWhenProductDoesntExist() throws NotFoundException{
        // Arrange// Act // Assert
        ProductDto productDto = productController.getProductById("101");
        when(productService.getProductById(UUID.fromString("101"))).thenReturn(null);
        assertNull(productDto);
    }

############################################################################################################
-> We can use the @MockBean annotation to mock the ProductRepository class.
-> We can use the @Autowired annotation to inject the ProductService class into the ProductController class.
-> We can use the @Autowired annotation to inject the FakeStoreProductServiceClient class into the ProductControllerTest class.
-> We can use the when method to specify the behavior of the mocked object.
-> We can use the thenReturn method to specify the return value of the mocked object.

*************************************************************************************************************
"this.productController" is null in the test class. Why?
-> The reason is that the ProductController class is not a Spring bean. It is a simple Java class.
-> So, we cannot use the @Autowired annotation to inject the ProductService class into the ProductController class.
-> To solve this problem, we can use the @MockBean annotation to mock the ProductService class.
-> The @MockBean annotation creates a mock for the ProductService class and adds it to the application context.
-> So, we can use the @Autowired annotation to inject the ProductService class into the ProductController class.
-> The @MockBean annotation is used to add mock objects to the Spring application context.
-> The @MockBean annotation is used to mock the dependencies of the class that we want to test.

***************************************************************************************************************************
Now, We will test the APIs end to end.
Using the SpringMVC test framework, we can test the APIs end to end.
We can use the MockMvc class to test the APIs end to end.
The MockMvc class is a part of the Spring MVC test framework.

Whenever we use @SpringBootTest annotation, it will start the server and will run the application.
This uses a lot of time and resources, as the Context is loaded and the server is started.
Since we are mocking a client, we don't need the Springboot Context as the client doesn't need this.
A client is a part of the application that makes requests to the server.
A client will just send the API request to the server, and receive a response back based on the request.
So, we don't need the Springboot Context for the client.
Client just cares about the request and response.
Here, we will write the functional tests for the APIs of the system.
*********************************************************************************************************************
So, instead of using the @SpringBootTest annotation, we can use the @WebMvcTest annotation.
@WebMvcTest annotation is used to test the APIs of the application.
@WebMvcTest annotation is used to test the controllers of the application.
We write @WebMvcTest(ProductController.class) to test the ProductController class.
--> This will only load the ProductController class and the required dependencies that can be reached from the Product Controller and not the entire application or any other unnecessary beans
--> This will not load the entire application context.



